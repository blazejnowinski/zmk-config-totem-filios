//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUN  4
#define FUN2  5
#define SYS  6
#define MEDIA  7

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

#define KEYS_L 4 3 2 1 0 14 13 12 11 10 25 24 23 22 21 20   // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31   // right-hand keys
#define THUMBS 32 33 34 35 36 37                            // thumb keys

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
    };
};

/ {
    behaviors {
        lt2: lt2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <50>;
            bindings = <&mo>, <&kp>;

            display-name = "Layer-Tap";
        };
    };
};

/ {
    behaviors {
        #if ZMK_BEHAVIOR_OMIT(NUM_WORD)
        /omit-if-no-ref/
#endif

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BACKSPACE DELETE DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
            ignore-numbers;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        h_arrow_left: h_arrow_left {
            compatible = "zmk,behavior-mod-morph";
            label = "H_ARROW_LEFT";
            bindings = <&kp H>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        j_arrow_down: j_arrow_down {
            compatible = "zmk,behavior-mod-morph";
            label = "J_ARROW_DOWN";
            bindings = <&hmr RIGHT_GUI J>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        k_arrow_up: k_arrow_up {
            compatible = "zmk,behavior-mod-morph";
            label = "K_ARROW_UP";
            bindings = <&hmr LEFT_ALT K>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        l_arrow_right: l_arrow_right {
            compatible = "zmk,behavior-mod-morph";
            label = "L_ARROW_RIGHT";
            bindings = <&hmr RIGHT_SHIFT L>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        hmr_colon: hmr_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "HMR_COLON";
            bindings = <&hmr RIGHT_CONTROL COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_undo {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LC(Z)>;
        };

        combo_copycat {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&mt LC(X) LC(C)>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LC(V)>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <18 17 16>;
            timeout-ms = <50>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <12 13 11 13>;
            timeout-ms = <50>;
        };

        alt_base_hmr {
            bindings = <&tog 5>;
            key-positions = <22 23 24 27 28 29>;
            timeout-ms = <50>;
        };

        capslock_fix_for_keyd {
            bindings = <&kp CAPSLOCK>;
            key-positions = <30 21>;
            timeout-ms = <50>;
        };
    };

    macros {
        paragraf: paragraf {
            label = "paragraf";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp U &kp N0 &kp N0 &kp A &kp N7 &kp SPACE>,
                <&macro_release>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        artykul: macro_artykul {
            compatible = "zmk,behavior-macro";
            label = "MACRO_ARTYKUL";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp A &kp R &kp T &kp DOT &kp SPACE>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        punkt: punkt {
            compatible = "zmk,behavior-macro";
            label = "PUNKT";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp P &kp K &kp T &kp SPACE>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        ustep: ustep {
            compatible = "zmk,behavior-macro";
            label = "USTEP";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp U &kp S &kp T &kp DOT &kp SPACE>;

            wait-ms = <0>;
            tap-ms = <0>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "base";
            bindings = <
         &kp Q                &kp W              &kp E            &kp R            &kp T      &kp Y              &kp U             &kp I            &kp O               &kp P
         &hmr LEFT_CONTROL A  &hmr LEFT_SHIFT S  &hmr LEFT_ALT D  &hmr LEFT_GUI F  &kp G      &kp H              &hmr LEFT_META J  &hmr LEFT_ALT K  &hmr RIGHT_SHIFT L  &hmr_colon
&kp ESC  &kp Z                &kp X              &lt 1 C          &kp V            &kp B      &kp N              &kp M             &kp COMMA        &kp DOT             &kp FSLH    &kp ENTER
                                                 &mo 4            &lt 2 SPACE      &kp TAB    &backspace_delete  &hmr RALT SPACE   &mo 3
            >;
        };

        arrows {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans    &trans     &trans
        &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &mkp MB4  &mkp MB5   &trans  &trans
                        &trans  &trans  &trans    &trans    &trans    &trans
            >;
        };

        symbols_layer {
            label = "symbols";
            bindings = <
        &kp GRAVE                   &artykul                  &paragraf               &ustep                  &punkt    &trans         &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &kp MINUS            &kp EQUAL
        &hmr LEFT_CONTROL NUMBER_1  &hmr LEFT_SHIFT NUMBER_2  &hmr LEFT_ALT NUMBER_3  &hmr LEFT_GUI NUMBER_4  &kp N5    &kp NUMBER_6   &hmr RIGHT_GUI N7  &hmr LEFT_ALT N8   &hmr RIGHT_SHIFT N9  &hmr RIGHT_CONTROL N0
&trans  &trans                      &trans                    &trans                  &trans                  &trans    &kp BACKSLASH  &kp SQT            &kp COMMA          &kp PERIOD           &kp SLASH              &trans
                                                              &trans                  &trans                  &trans    &trans         &trans             &trans
            >;
        };

        utility_layer {
            label = "utility";
            bindings = <
        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        &kp F2                &kp F2                &kp F3      &kp F4        &kp F5          &kp F6        &kp F7        &kp F8        &kp F10       &kp F11
&kp F1  &bootloader           &sys_reset            &trans      &trans        &trans          &bt BT_CLR    &bt BT_PRV    &bt BT_NXT    &trans        &trans        &kp F12
                                                    &trans      &trans        &trans          &trans        &trans        &trans
            >;
        };

        mouse_layer {
            bindings = <
       &trans  &trans    &trans    &trans    &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
       &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&to 0  &trans  &trans    &trans    &trans    &trans    &trans          &trans          &mkp MB4      &mkp MB5         &trans  &to 0
                         &trans    &trans    &trans    &trans          &trans          &trans
            >;
        };

        base_with_hrm {
            label = "alternative_base";
            bindings = <
         &kp Q         &kp W              &kp E            &kp R             &kp T      &kp Y          &kp U                &kp I        &kp O              &kp P
         &hmr LCTRL A  &hmr LEFT_SHIFT S  &hmr LEFT_ALT D  &hmr LEFT_META F  &kp G      &kp H          &hmr LEFT_META J     &hmr LALT K  &hmr LEFT_SHIFT L  &hmr LEFT_CONTROL SEMICOLON
&kp ESC  &kp Z         &kp X              &kp C            &kp V             &kp B      &kp N          &kp M                &kp COMMA    &kp DOT            &kp FSLH                     &kp ENTER
                                          &mo 4            &lt 2 SPACE       &kp TAB    &kp BACKSPACE  &mt RIGHT_ALT SPACE  &mo 3
            >;
        };
    };
};
