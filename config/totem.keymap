//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUN  4
#define FUN2  5
#define SYS  6
#define MEDIA  7

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

#define KEYS_L 4 3 2 1 0 14 13 12 11 10 25 24 23 22 21 20   // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31   // right-hand keys
#define THUMBS 32 33 34 35 36 37                            // thumb keys

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
    };
};

/ {
    behaviors {
        lt2: lt2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <50>;
            bindings = <&mo>, <&kp>;

            display-name = "Layer-Tap";
        };
    };
};

/ {
    behaviors {
        #if ZMK_BEHAVIOR_OMIT(NUM_WORD)
        /omit-if-no-ref/
#endif

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BACKSPACE DELETE DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
            ignore-numbers;
        };

        hml_utility_layer: hml_utility_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            label = "HML_UTILITY_LAYER";
            bindings = <&mo>, <&kp>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_undo {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LC(Z)>;
        };

        combo_copycat {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&mt LC(X) LC(C)>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LC(V)>;
        };
    };

    macros {
        paragraf: paragraf {
            label = "paragraf";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp U &kp N0 &kp N0 &kp LS(A) &kp N7>,
                <&macro_release>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "base";
            bindings = <
            &kp Q                &kp W              &kp E                   &kp R            &kp T      &kp Y              &kp U             &kp I                   &kp O               &kp P
            &hml LEFT_CONTROL A  &hml LEFT_SHIFT S  &hml_utility_layer 3 D  &hml LEFT_GUI F  &kp G      &kp H              &hmr RIGHT_GUI J  &hml_utility_layer 3 K  &hmr RIGHT_SHIFT L  &hmr RIGHT_CONTROL SEMI
&kp ESCAPE  &kp Z                &kp X              &kp C                   &kp V            &kp B      &kp N              &kp M             &kp COMMA               &kp DOT             &kp FSLH                 &kp LEFT_ALT
                                                    &mo 2                   &kp SPACE        &kp TAB    &backspace_delete  &mo 1             &mo 2
            >;
        };

        altgr_layer {
            label = "altgr";
            bindings = <
         &kp Q                    &kp W                  &kp RA(E)               &kp R            &kp T      &kp Y              &kp U             &kp I                   &kp RA(O)              &kp P
         &hml LEFT_CONTROL RA(A)  &hml LEFT_SHIFT RA(S)  &hml_utility_layer 3 D  &hml LEFT_GUI F  &kp G      &kp H              &hmr RIGHT_GUI J  &hml_utility_layer 3 K  &hmr LEFT_SHIFT RA(L)  &hmr RIGHT_CONTROL COLON
&kp ESC  &kp RA(Z)                &kp RA(X)              &kp RA(C)               &kp V            &kp B      &kp RA(N)          &kp M             &kp COMMA               &kp PERIOD             &kp SLASH                 &kp LEFT_ALT
                                                         &mo 2                   &kp SPACE        &kp TAB    &backspace_delete  &trans            &mo 2
            >;
        };

        symbols_layer {
            label = "symbols";
            bindings = <
         &kp GRAVE                   &paragraf               &trans                         &trans                  &trans     &trans             &kp LEFT_BRACKET   &kp RIGHT_BRACKET        &kp MINUS            &kp EQUAL
         &hml LEFT_CONTROL NUMBER_1  &hml NUMBER_2 NUMBER_2  &hml_utility_layer 3 NUMBER_3  &hml LEFT_GUI NUMBER_4  &kp N5     &kp NUMBER_6       &hmr RIGHT_GUI N7  &hml_utility_layer 3 N8  &hmr RIGHT_SHIFT N9  &hml_utility_layer 3 N0
&kp ESC  &trans                      &trans                  &trans                         &trans                  &trans     &trans             &trans             &trans                   &trans               &trans                   &kp SQT
                                                             &trans                         &kp SPACE               &kp TAB    &backspace_delete  &trans             &trans
            >;
        };

        utility_layer {
            label = "utility";
            bindings = <
        &kp F1                           &kp F2                       &kp F3                &kp F4                          &kp F5        &kp F6             &kp F7                     &kp F8        &kp F9                        &kp F10
        &hml LEFT_CONTROL C_VOLUME_DOWN  &hml LEFT_SHIFT C_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &hml LEFT_GUI C_BRIGHTNESS_INC  &trans        &kp LEFT           &hmr RIGHT_GUI DOWN_ARROW  &kp UP_ARROW  &hmr RIGHT_SHIFT RIGHT_ARROW  &hmr RIGHT_CONTROL F11
&trans  &bootloader                      &sys_reset                   &bt BT_CLR            &bt BT_PRV                      &bt BT_NXT    &trans             &trans                     &kp K_BACK    &kp K_FORWARD                 &kp F12                 &trans
                                                                      &trans                &kp SPACE                       &kp TAB       &backspace_delete  &trans                     &trans
            >;
        };
    };
};
